<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gdut.crm.mapper.workbench.ContactsMapper">
  <resultMap id="BaseResultMap" type="Contacts">
    <id column="id" jdbcType="CHAR" property="id" />
    <result column="owner" jdbcType="CHAR" property="owner" />
    <result column="source" jdbcType="VARCHAR" property="source" />
    <result column="customer_id" jdbcType="CHAR" property="customerId" />
    <result column="fullname" jdbcType="VARCHAR" property="fullname" />
    <result column="appellation" jdbcType="VARCHAR" property="appellation" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="mphone" jdbcType="VARCHAR" property="mphone" />
    <result column="job" jdbcType="VARCHAR" property="job" />
    <result column="create_by" jdbcType="VARCHAR" property="createBy" />
    <result column="create_time" jdbcType="CHAR" property="createTime" />
    <result column="edit_by" jdbcType="VARCHAR" property="editBy" />
    <result column="edit_time" jdbcType="CHAR" property="editTime" />
    <result column="description" jdbcType="VARCHAR" property="description" />
    <result column="contact_summary" jdbcType="VARCHAR" property="contactSummary" />
    <result column="next_contact_time" jdbcType="CHAR" property="nextContactTime" />
    <result column="address" jdbcType="VARCHAR" property="address" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from t_contacts
    where id = #{id,jdbcType=CHAR}
  </delete>
  <insert id="insert" parameterType="Contacts">
    insert into t_contacts (id, owner, source, 
      customer_id, fullname, appellation, 
      email, mphone, job, 
      create_by, create_time, edit_by, 
      edit_time, description, contact_summary, 
      next_contact_time, address)
    values (#{id,jdbcType=CHAR}, #{owner,jdbcType=CHAR}, #{source,jdbcType=VARCHAR}, 
      #{customerId,jdbcType=CHAR}, #{fullname,jdbcType=VARCHAR}, #{appellation,jdbcType=VARCHAR}, 
      #{email,jdbcType=VARCHAR}, #{mphone,jdbcType=VARCHAR}, #{job,jdbcType=VARCHAR}, 
      #{createBy,jdbcType=VARCHAR}, #{createTime,jdbcType=CHAR}, #{editBy,jdbcType=VARCHAR}, 
      #{editTime,jdbcType=CHAR}, #{description,jdbcType=VARCHAR}, #{contactSummary,jdbcType=VARCHAR}, 
      #{nextContactTime,jdbcType=CHAR}, #{address,jdbcType=VARCHAR})
  </insert>
  <update id="updateByPrimaryKey" parameterType="Contacts">
    update t_contacts
    set owner = #{owner,jdbcType=CHAR},
      source = #{source,jdbcType=VARCHAR},
      customer_id = #{customerId,jdbcType=CHAR},
      fullname = #{fullname,jdbcType=VARCHAR},
      appellation = #{appellation,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      mphone = #{mphone,jdbcType=VARCHAR},
      job = #{job,jdbcType=VARCHAR},
      create_by = #{createBy,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=CHAR},
      edit_by = #{editBy,jdbcType=VARCHAR},
      edit_time = #{editTime,jdbcType=CHAR},
      description = #{description,jdbcType=VARCHAR},
      contact_summary = #{contactSummary,jdbcType=VARCHAR},
      next_contact_time = #{nextContactTime,jdbcType=CHAR},
      address = #{address,jdbcType=VARCHAR}
    where id = #{id,jdbcType=CHAR}
  </update>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select c.id, c.owner, source,cus.name as customer_id, fullname,appellation, email, mphone, job,
    c.create_by, c.create_time, c.edit_by, c.edit_time, c.description, c.contact_summary, c.next_contact_time,
    c.address
    from t_contacts c
    join t_customer cus on cus.id = c.customer_id
    where c.id = #{id,jdbcType=CHAR}
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    select c.id, owner, source, customer_id, fullname,v.value as appellation, email, mphone, job,
    create_by, create_time, edit_by, edit_time, description, contact_summary, next_contact_time, 
    address
    from t_contacts c
    left join t_dic_value v on v.id=c.appellation
  </select>
  <select id="selectByCustomerId" resultMap="BaseResultMap">
    select c.id,fullname,v.value as appellation, email, mphone
    from t_contacts c
    left join t_dic_value v on v.id=c.appellation
    where c.customer_id = #{id}
  </select>
  <select id="selectIdByCustomerId" resultType="String">
    select id
    from t_contacts
    where customer_id in
    <foreach collection="ids" item="id" open="(" close=")" separator=",">
      #{id}
    </foreach>
  </select>
  <delete id="deleteByCustomerId" >
    delete from t_contacts
    where customer_id in
    <foreach collection="ids" item="id" separator="," open="(" close=")">
      #{id}
    </foreach>
  </delete>
  <select id="selectByName" resultType="com.gdut.crm.pojo.workbench.Contacts">
    select c.id,fullname,v.value as appellation, email, mphone
    from t_contacts c
    left join t_dic_value v on v.id=c.appellation
    <where>
      <if test="n!=null and n!=''">
        and fullname like concat('%',#{name},'%')
      </if>
    </where>
  </select>
  <select id="selectContactsByConditions" resultType="com.gdut.crm.pojo.workbench.Contacts">
    select c.id,c.fullname,v.value as appellation,u.name as owner, job,c2.name as customer_id,v2.value as source
    from t_contacts c
    join t_user u on u.id=c.owner
    join t_customer c2 on c2.id=c.customer_id
    left join t_dic_value v on v.id=c.appellation
    left join t_dic_value v2 on v2.id=c.source
    <where>
      <if test="owner!=null and owner!=''">
        and u.name like concat('%',#{owner},'%')
      </if>
      <if test="fullname!=null and fullname!=''">
        and fullname like concat('%',#{fullname},'%')
      </if>
      <if test="customerName!=null and customerName!=''">
        and c2.name like concat('%',#{customerName},'%')
      </if>
      <if test="source!=null and source!=''">
        and c.source = #{source}
      </if>
      <if test="job!=null and job!=''">
        and c.job like concat('%',#{job},'%')
      </if>
    </where>
    order by c.create_time asc
    limit #{startRow},#{count}
    </select>
  <select id="selectContactForDetail" resultType="com.gdut.crm.pojo.workbench.Contacts">
    select c.id,c.fullname,v.value as appellation,u.name as owner, job,c2.name as customer_id,v2.value as source, c.email, mphone,
           uc.name as create_by, c.create_time,ue.id as edit_by, c.edit_time, c.description, c.contact_summary, c.next_contact_time,c.address
    from t_contacts c
        join t_user u on u.id=c.owner
        join t_customer c2 on c2.id=c.customer_id
        join t_user uc on uc.id=c.create_by
        left join t_user ue on ue.id=c.edit_by
        left join t_dic_value v on v.id=c.appellation
        left join t_dic_value v2 on v2.id=c.source
    where c.id = #{id}
  </select>
  <select id="countByConditions" resultType="java.lang.Integer">
    select count(*)
    from t_contacts c
    join t_user u on u.id=c.owner
    join t_customer c2 on c2.id=c.customer_id
    left join t_dic_value v2 on v2.id=c.source
    <where>
      <if test="owner!=null and owner!=''">
        and u.name like concat('%',#{owner},'%')
      </if>
      <if test="fullname!=null and fullname!=''">
        and fullname like concat('%',#{fullname},'%')
      </if>
      <if test="customerName!=null and customerName!=''">
        and c2.name like concat('%',#{customerName},'%')
      </if>
      <if test="source!=null and source!=''">
        and v2.value like concat('%',#{source},'%')
      </if>
      <if test="job!=null and job!=''">
        and c.job like concat('%',#{job},'%')
      </if>
    </where>
  </select>
  <delete id="deleteByKeys">
    delete from t_contacts
    where id in
    <foreach collection="ids" item="id" separator="," open="(" close=")">
      #{id}
    </foreach>
  </delete>
  <select id="selectContactsByPrimaryKey" resultType="com.gdut.crm.pojo.workbench.Contacts">
    select  c.id,c.fullname,appellation,owner, job,cus.name as customer_id,source
    from t_contacts c
    join t_customer cus on cus.id=c.customer_id
    where c.id=#{id}
  </select>
</mapper>